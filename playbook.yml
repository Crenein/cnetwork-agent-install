---
- hosts: localhost
  become: true
  vars:
    influx_org: crenein
    influx_bucket: fping
    influx_user: admin
    influx_password: CreneinLocal
    influx_url: "http://localhost:8086"
    influx_token_placeholder: "PENDIENTE"
    env_file: /home/nicolas/CRENEIN/c-network-agent/.env
    compose_file: /home/nicolas/CRENEIN/c-network-agent/docker-compose.yml
  tasks:
    - name: Instalar dependencias del sistema
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - fping
          - vsftpd
          - tftpd-hpa
        state: present
        update_cache: yes

    - name: Instalar Docker y Docker Compose
      apt:
        name:
          - docker.io
          - docker-compose
        state: present
        update_cache: yes

    - name: Habilitar e iniciar Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Crear directorios de datos
      file:
        path: "{{ item }}"
        state: directory
        owner: 1000
        group: 1000
        mode: '0755'
      loop:
        - /data/influxdb2
        - /data/mongodb
        - /data/files
        - /data/redis

    - name: Descargar configuración de vsftpd
      get_url:
        url: https://raw.githubusercontent.com/Crenein/cnetwork-agent-install/master/vsftpd.conf
        dest: /etc/vsftpd.conf
        mode: '0644'

    - name: Reiniciar vsftpd
      service:
        name: vsftpd
        state: restarted
        enabled: yes

    - name: Descargar configuración de tftpd-hpa
      get_url:
        url: https://raw.githubusercontent.com/Crenein/cnetwork-agent-install/master/tftpd-hpa
        dest: /etc/default/tftpd-hpa
        mode: '0644'

    - name: Reiniciar tftpd-hpa
      service:
        name: tftpd-hpa
        state: restarted
        enabled: yes

    - name: Crear usuario backups si no existe
      user:
        name: backups
        home: /data/files
        create_home: no
        shell: /usr/sbin/nologin
        state: present

    - name: Asignar permisos a /data/files
      file:
        path: /data/files
        owner: backups
        group: backups
        recurse: yes
        mode: '0755'

    - name: Crear archivo .env base
      copy:
        dest: "{{ env_file }}"
        content: |
          INFLUX_TOKEN="{{ influx_token_placeholder }}"
          INFLUX_BUCKET={{ influx_bucket }}
          INFLUX_URL="http://influxdb:8086"
          SECRET_KEY="09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
          ALGORITHM="HS256"
          ACCESS_TOKEN_EXPIRE_MINUTES=30
          DEBUG=False
          DB_NAME=mongo-agent
          DB_URL=mongodb://root:root@mongodb:27017/?authSource=admin&tls=false
          KEY_ENCRYPT=b'y1TpxOK9wYrdMT0ti9pK2NTuhw0DlrOGYrpTsl26f70='
          FERNET_KEY='y1TpxOK9wYrdMT0ti9pK2NTuhw0DlrOGYrpTsl26f70='
          REDIS_URL=redis://redis:6379/0
        mode: '0644'

    - name: Copiar docker-compose.yml
      copy:
        src: ../docker-compose.yml
        dest: "{{ compose_file }}"
        mode: '0644'

    - name: Arrancar contenedores
      shell: "docker-compose -f {{ compose_file }} up -d"
      args:
        chdir: /home/nicolas/CRENEIN/c-network-agent/

    - name: Esperar a que InfluxDB esté listo
      shell: |
        for i in {1..30}; do
          if curl -s http://localhost:8086/health | grep '"status":"pass"' > /dev/null; then
            exit 0
          fi
          sleep 3
        done
        exit 1
      register: influx_health
      failed_when: influx_health.rc != 0

    - name: Instalar CLI de InfluxDB si no está
      apt:
        name: influxdb2-cli
        state: present
        update_cache: yes

    - name: Obtener token admin de InfluxDB
      shell: docker exec influxdb printenv DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
      register: admin_token
      changed_when: false

    - name: Generar token de acceso total para el bucket
      shell: influx auth create --host "{{ influx_url }}" -o "{{ influx_org }}" --all-access -t "{{ admin_token.stdout }}" -q | grep -oP 'eyJ[^ ]+'
      register: influx_token
      changed_when: false

    - name: Actualizar .env con el token generado
      lineinfile:
        path: "{{ env_file }}"
        regexp: '^INFLUX_TOKEN='
        line: 'INFLUX_TOKEN="{{ influx_token.stdout }}"'
        backrefs: yes

    - name: Reiniciar contenedores para aplicar el nuevo token
      shell: "docker-compose -f {{ compose_file }} restart"
      args:
        chdir: /home/nicolas/CRENEIN/c-network-agent/

    - name: Esperar a que el endpoint de salud responda
      shell: |
        for i in {1..15}; do
          if curl -f http://localhost:8000/api/v1/health/public &> /dev/null; then
            exit 0
          fi
          sleep 3
        done
        exit 1
      register: health_check
      failed_when: health_check.rc != 0

    - name: Inicializar base de datos desde el contenedor
      shell: docker exec cnetwork-agent python3 populate_db.py
      register: db_init
      retries: 3
      delay: 10
      until: db_init.rc == 0

    - name: Mostrar estado final de los contenedores
      shell: docker-compose -f {{ compose_file }} ps
      args:
        chdir: /home/nicolas/CRENEIN/c-network-agent/
      register: compose_ps
      changed_when: false

    - name: Mostrar mensaje final
      debug:
        msg: |
          ¡INSTALACIÓN COMPLETADA EXITOSAMENTE!
          FastAPI: http://localhost:8000
          InfluxDB: http://localhost:8086
          MongoDB: localhost:27017
          Redis: localhost:6379
          Flower: http://localhost:5555
          Admin: agent@example.com / admin123
          InfluxDB: admin / CreneinLocal
          MongoDB: root / root
          Verificar estado: docker-compose ps
          Ver logs: docker-compose logs -f [servicio]
          Reiniciar servicios: docker-compose restart
          Detener servicios: docker-compose down
